// Fix: Replaced placeholder text with a complete, functional Angular component.
import { Component, ChangeDetectionStrategy, signal, inject, computed } from '@angular/core';
import { GeminiService, GenerationOptions } from './services/gemini.service';
import { GuidanceService } from './services/guidance.service';
import { UtilityService } from './services/utility.service';

/**
 * The main application component.
 * This component orchestrates the user interface for the Cinematic Script AI Toolkit.
 * It handles user input for the script, theme, and generation options,
 * and displays the results generated by the AI services.
 */
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class AppComponent {
  /** Injected service for generating cinematic content. */
  readonly geminiService = inject(GeminiService);
  /** Injected service for getting quick script feedback. */
  readonly guidanceService = inject(GuidanceService);
  /** Injected service for clipboard and file download utilities. */
  readonly utilityService = inject(UtilityService);

  /** Signal holding the user's script text. */
  readonly scriptText = signal<string>('');
  /** Signal holding the user-defined cinematic theme. */
  readonly theme = signal<string>('');
  /** Signal holding the state of the generation tool checkboxes. */
  readonly options = signal<GenerationOptions>({
    blueprint: true,
    suno: true,
    imageFrames: true,
  });

  /** Signal holding the latest feedback from the GuidanceService. */
  readonly guidance = signal<string>('');
  /** Signal indicating if the GuidanceService is currently fetching feedback. */
  readonly guidanceIsLoading = signal<boolean>(false);
  
  /** A computed signal that determines if the main generation form is valid. */
  readonly isFormValid = computed(() => {
    const opts = this.options();
    const hasOption = opts.blueprint || opts.suno || opts.imageFrames;
    return this.scriptText().trim().length > 10 && this.theme().trim().length > 3 && hasOption;
  });

  /** A computed signal that returns the Suno prompt data as a formatted JSON string. */
  readonly sunoJson = computed(() => {
    const sunoData = this.geminiService.sunoResult();
    return sunoData ? JSON.stringify(sunoData, null, 2) : '';
  });

  /**
   * Updates the `scriptText` signal when the user types in the script textarea.
   * @param event The input event from the textarea.
   */
  onScriptInput(event: Event): void {
    this.scriptText.set((event.target as HTMLTextAreaElement).value);
  }

  /**
   * Updates the `theme` signal when the user types in the theme input field.
   * @param event The input event from the input field.
   */
  onThemeInput(event: Event): void {
    this.theme.set((event.target as HTMLInputElement).value);
  }

  /**
   * Updates the `options` signal when a generation tool checkbox is changed.
   * @param option The key of the option to update.
   * @param event The change event from the checkbox.
   */
  onOptionChange(option: keyof GenerationOptions, event: Event) {
    const isChecked = (event.target as HTMLInputElement).checked;
    this.options.update(current => ({ ...current, [option]: isChecked }));
  }

  /**
   * Triggers the main content generation process via the GeminiService.
   * It only runs if the form is valid. Clears any previous guidance message.
   */
  generate(): void {
    if (!this.isFormValid()) return;
    this.guidance.set('');
    this.geminiService.generate(this.scriptText(), this.options(), this.theme());
  }
  
  /**
   * Fetches quick, actionable feedback for the current script text.
   * Manages the loading and result state for the guidance feature.
   */
  async getGuidance(): Promise<void> {
    if (!this.scriptText()) return;
    this.guidanceIsLoading.set(true);
    this.guidance.set('');
    try {
      const feedback = await this.guidanceService.getGuidance(this.scriptText());
      this.guidance.set(feedback);
    } catch (e) {
      console.error('[ERROR] Failed to get guidance:', e);
      this.guidance.set('Sorry, I was unable to get feedback right now.');
    } finally {
      this.guidanceIsLoading.set(false);
    }
  }
}
